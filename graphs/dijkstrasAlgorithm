#include<iostream>
#include"bits/stdc++.h"
#include<algorithm>
#include<string>
#include<stack>
#include<set>
#include<vector>
#include<map>
#include<unordered_map>
#include<queue>
#include<climits>
// #define int long long
#define vi vector<int>
#define vvi vector<vi>
#define pii pair<int,int>
#define vii vector<pii>
#define rep(i,a,b) for(int i=a;i<b;i++)
#define ff first
#define ss second
#define setbits(x) builtin_popcount(x)
//const int N=1e5+2,MOD=1e9+7;
//bool vis[N];
// vector<int> adj[N];
using namespace std;
// representation of graphs
//vi adj[N];
//vector<bool> vis;
//vector<vector<int>> adj;
//vector<int> components;
//vector<int> col;
//bool bipart;
//const int N=1e5+6;
//vector<int> parent(N);
//vector<int> sz(N);
//int n,m;
//const int N=1e5+3;
//vector<vector<int>> g[N];
//int cost=0;
//vector<int> dist(N),parent(N);
//const int INF=1e9;
//vector<bool> vis(N);
const int inf=1e7;
int32_t main(){
    int n,m;
    cin>>n>>m;
    vector<int> dist(n+1,inf);
    vector<vector<pair<int,int>>> graph(n+1);
    for(int i=0;i<m;i++){
        int u,v,w;
        cin>>u>>v>>w;
        graph[u].push_back({v,w});
        graph[v].push_back({u,w});
    }
    int source;
    cin>>source;
    dist[source]=0;
    set<pair<int,int>> s;
    // {wt,vertex}
    s.insert({0,source});
    while(!s.empty()){
        auto x=*(s.begin());
        s.erase(x);
        for(auto it:graph[x.second]){
            if(dist[it.first]>dist[x.second]+it.second){
                s.erase({dist[it.first],it.first});
                dist[it.first]=dist[x.second]+it.second;
                s.insert({dist[it.first],it.first});
            }
        }
    }
    for(int i=1;i<=n;i++){
        if(dist[i]<inf)
            cout<<dist[i]<<" ";
        else
            cout<<-1<<" ";
    }
    return 0;
}
