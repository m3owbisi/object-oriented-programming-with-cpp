#include<iostream>
#include"bits/stdc++.h"
#include<algorithm>
#include<string>
#include<stack>
#include<set>
#include<vector>
#include<map>
#include<unordered_map>
#include<queue>
#include<climits>
// #define int long long
#define vi vector<int>
#define vvi vector<vi>
#define pii pair<int,int>
#define vii vector<pii>
#define rep(i,a,b) for(int i=a;i<b;i++)
#define ff first
#define ss second
#define setbits(x) builtin_popcount(x)
const int N=1e5+2,MOD=1e9+7;
//bool vis[N];
// vector<int> adj[N];
using namespace std;
// representation of graphs
//vi adj[N];
vector<bool> vis;
int n,m;
vector<vector<int>> adj;
vector<int> components;
vector<int> col;
bool bipart;
void color(int u,int curr){
    if(col[u]!=-1 && col[u]!=curr){
        bipart=false;
        return;
    }
    col[u]=curr;
    if(vis[u])
        return;
    vis[u]=true;
    for(auto i:adj[u])
        color(i,curr xor 1);
        //  0 xor 1 = 1
        //  1 xor 1 = 0
}
int32_t main(){
    bipart=true;
    int n,m;
    cin>>n>>m;
    adj=vector<vector<int>>(n);
    vis=vector<bool>(n,false);
    col=vector<int>(n,-1);
    for(int i=0;i<m;i++){
        int u,v;
        cin>>u>>v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    for(int i=0;i<n;i++){
        if(!vis[i])
            color(i,0);
    }
    if(bipart)
        cout<<"graph is bipartite"<<endl;
    else
        cout<<"graph is not bipartite"<<endl;
    return 0;
}
