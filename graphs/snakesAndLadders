#include<iostream>
#include"bits/stdc++.h"
#include<algorithm>
#include<string>
#include<stack>
#include<set>
#include<vector>
#include<map>
#include<unordered_map>
#include<queue>
#include<climits>
// #define int long long
#define vi vector<int>
#define vvi vector<vi>
#define pii pair<int,int>
#define vii vector<pii>
#define rep(i,a,b) for(int i=a;i<b;i++)
#define ff first
#define ss second
#define setbits(x) builtin_popcount(x)
//const int N=1e5+2,MOD=1e9+7;
//bool vis[N];
// vector<int> adj[N];
using namespace std;
// representation of graphs
//vi adj[N];
//vector<bool> vis;
//vector<vector<int>> adj;
//vector<int> components;
//vector<int> col;
//bool bipart;
//const int N=1e5+6;
//vector<int> parent(N);
//vector<int> sz(N);
//int n,m;
//const int N=1e5+3;
//vector<vector<int>> g[N];
//int cost=0;
//vector<int> dist(N),parent(N);
//const int INF=1e9;
//vector<bool> vis(N);
//const int inf=1e7;
int32_t main(){
    int ladders,snakes;
    cin>>ladders;
    map<int,int> lad;
    map<int,int> snak;
    for(int i=0;i<ladders;i++){
        int u,v;
        cin>>u>>v;
        lad[u]=v;
    }
    cin>>snakes;
    for(int i=0;i<snakes;snakes++){
        int u,v;
        cin>>u>>v;
        snak[u]=v;
    }
    int move=0;
    queue<int> q;
    q.push(1);
    bool found=false;
    vector<int> vis(101,0);
    vis[1]=true;
    while(!q.empty() && !found){
        int sz=q.size();
        while(sz--){
            int t=q.front();
            q.pop();
            for(int die=1;die<=6;die++){
                if(t+die==100)
                    found=true;
                if(t+die<=100 && lad[t+die] && !vis[lad[t+die]]){
                    vis[lad[t+die]]=true;
                    if(lad[t+die]==100)
                        found=true;
                    q.push(lad[t+die]);
                } else if(t+die<=100 && snak[t+die] && !vis[snak[t+die]]){
                    vis[snak[t+die]]=true;
                    if(snak[t+die]==100);
                        found=true;
                    q.push(snak[t+die]);
                } else if(t+die<=100 && !vis[t+die] && !snak[t+die] && !lad[t+die]){
                    vis[t+die]=true;
                    q.push(t+die);
                }
            }
        }
        move++;
    }
    if(found)
        cout<<move<<endl;
    else
        cout<<-1<<endl;
    return 0;
}
