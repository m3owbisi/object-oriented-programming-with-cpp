#include<iostream>
using namespace std;
struct node{
    int data;
    struct node *left;
    struct node *right;
    node(int val){
        data=val;
        left=NULL;
        right=NULL;
    }
};
int height(node *root){
    if(root==NULL){
        return 0;
    }
    int lh=height(root->left);
    int rh=height(root->right);
    return max(lh,rh)+1;
}
bool isBalanced(node *root){
    if(root==NULL){
        return true;
    }
    if(isBalanced(root->left)==false){
        return false;
    }
    if(isBalanced(root->right)==false){
        return false;
    }
    int lh=height(root->left);
    int rh=height(root->right);
    if(abs(lh-rh)<=1){
        return true;
    } else{
        return false;
    }
}
int main(){
    struct node *root1=new node(1);
    root1->left=new node(2);
    root1->right=new node(3);
    root1->left->left=new node(4);
    //Balanced
    //Height Balanced Tree ->root1,root2
    if(isBalanced(root1)){
        cout<<"Balanced Tree"<<"\n";
    } else{
        cout<<"NOT Balanced/Unbalanced Tree"<<"\n";
    }
    struct node *root2=new node(1);
    root2->left=new node(2);
    root2->right=new node(3);
    root2->left->left=new node(4);
    root2->left->left->right=new node(5);
    //NOT Balanced/Unbalanced
    if(isBalanced(root2)){
        cout<<"Balanced Tree"<<"\n";
    } else{
        cout<<"NOT Balanced/Unbalanced Tree"<<"\n";
    }
    return 0;
}
