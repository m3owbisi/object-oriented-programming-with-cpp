#include<iostream>
using namespace std;
struct node{
    int data;
    struct node *left;
    struct node *right;
    node(int val){
        data=val;
        left=NULL;
        right=NULL;
    }
};
int calcDiameter(node *root,int *height){
    if(root==NULL){
        return 0;
    }
    int lHeight=0,rHeight=0;
    int lDiameter=calcDiameter(root->left,&lHeight);
    int rDiameter=calcDiameter(root->right,&rHeight);
    int currDiameter=lHeight+rHeight+1;
    *height=max(lHeight,rHeight)+1;
    return max(currDiameter,max(lDiameter,rDiameter));
}
int main(){
    struct node *root=new node(1);
    root->left=new node(2);
    root->right=new node(3);
    root->left->left=new node(4);
    root->left->right=new node(5);
    root->right->left=new node(6);
    root->right->right=new node(7);
    //diameter of binary tree_optimized
    int height=0;
    cout<<calcDiameter(root,&height)<<"\n";
    return 0;
}
