#include<iostream>
using namespace std;
struct node{
    int data;
    struct node *left;
    struct node *right;
    node(int val){
        data=val;
        left=NULL;
        right=NULL;
    }
};
//case 1
void printSubtreeNodes(node *root,int k){
    if(root==NULL){
        return;
    }
    if(k==0){
        cout<<root->data<<"\t";
        return;
    }
    printSubtreeNodes(root->left,k-1);
    printSubtreeNodes(root->right,k-1);
}
//case 2
int printNodesAtk(node *root,node *target,int k){
    if(root==NULL){
        return -1;
    }
    if(root==target){
        printSubtreeNodes(root,k);
        return 0;
    }
    int d1=printNodesAtk(root->left,target,k);
    if(d1!=-1){
        if(d1==k){
            cout<<root->data<<"\t";
        } else{
            printSubtreeNodes(root->right,k-d1-2);
        }
        return 1+d1;
    }
    int d2=printNodesAtk(root->right,target,k);
    if(d2!=-1){
        if(d2==k){
            cout<<root->data<<"\t";
        } else{
            printSubtreeNodes(root->left,k-d2-2);
        }
        return 1+d2;
    }
    return -1;
}
int main(){
    struct node *root=new node(1);
    root->left=new node(5);
    root->right=new node(2);
    root->left->left=new node(6);
    root->right->left=new node(3);
    root->right->right=new node(4);
    root->left->left->right=new node(7);
    root->left->left->right->left=new node(8);
    root->left->left->right->right=new node(9);
    //test
    printNodesAtk(root,root->left,3);
    return 0;
}
