#include<iostream>
using namespace std;
struct node{
    int data;
    node *left,*right;
    node(int val){
        data=val;
        left=NULL;
        right=NULL;
    }
};
// Check for BST
bool isBST(node *root,node *min=NULL,node *max=NULL){
    if(root==NULL){
        return true;
    }
    if(min!=NULL && root->data<=min->data){
        return false;
    }
    if(max!=NULL && root->data>=max->data){
        return false;
    }
    bool leftValid=isBST(root->left,min,root);
    bool rightValid=isBST(root->right,root,max);
    return leftValid && rightValid; // and
}
int main(){
    node *root1=new node(1);    
    /*    Tree 1 
            1
           / \
          2   3
    */
    root1->left=new node(2);    
    root1->right=new node(3);
    if(isBST(root1,NULL,NULL)){
        cout<<"Valid BST"<<endl;
    } else{
        cout<<"Invalid BST"<<endl;
    }
    node *root2=new node(5);    
    /*    Tree 2 
            5
           / \
          2   8
    */
    root2->left=new node(2);
    root2->right=new node(8);
    if(isBST(root2,NULL,NULL)){
        cout<<"Valid BST"<<endl;
    } else{
        cout<<"Invalid BST"<<endl;
    }
    return 0;
}
