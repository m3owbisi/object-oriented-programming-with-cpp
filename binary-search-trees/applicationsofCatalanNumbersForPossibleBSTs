#include<iostream>
#include<vector>
struct node{
    int data;
    node *left,*right;
    node(int val){
        data=val;
        left=NULL;
        right=NULL;
    }
};
vector<node *> constructTrees(int start,int end){
    vector<node *> trees;
    if(start>end){
        trees.push_back(NULL);
        return trees;
    }
    for(int i=start;i<=end;i++){
        vector<node *> leftSubTrees=constructTrees(start,i-1);
        vector<node *> rightSubTrees=constructTrees(i+1,end);
        for(int j=0;j<leftSubTrees.size();j++){
            node *left=leftSubTrees[j];
            for(int k=0;k<rightSubTrees.size();k++){
                node *right=rightSubTrees[k];
                node *Node=new node[i];
                node->left=left;
                node->right=right;
                trees.push_back(Node);
            }
        }
    }
    return trees;
}
void preorder(node *root){
    if(root==NULL){
        return;
    }
    cout<<root->data<<"\t";
    preorder(root->left);
    preorder(root->right);
}
int main(){
    vector<node *> totalTrees=constructTrees(1,3);
    for(int i=0;i<totalTrees.size();i++){
        cout<<(i+1)<<":";   // (i+1)
        preorder(totalTrees[i]);
        cout<<endl;
    }
    return 0;
}
/*    1:    1    2    3
      2:    1    3    2
      3:    2    1    3
      4:    3    1    2
      5:    3    2    1
*/
