#include <iostream>
#include <unordered_set>

bool hasPairWithSum(int arr[], int n, int k) {
    std::unordered_set<int> complements;

    for (int i = 0; i < n; ++i) {
        int currentElement = arr[i];
        int complement = k - currentElement;

        // Check if the complement exists in the set
        if (complements.find(complement) != complements.end()) {
            // Pair found
            return true;
        }

        // Add the current element to the set
        complements.insert(currentElement);
    }

    // No pair found
    return false;
}

int main() {
    int arr[] = {1, 4, 3, 7, 10, 5};
    int n = sizeof(arr) / sizeof(arr[0]);
    int k = 12;

    if (hasPairWithSum(arr, n, k)) {
        std::cout << "There exists a pair with sum " << k << " in the array.\n";
    } else {
        std::cout << "No pair found with sum " << k << " in the array.\n";
    }

    return 0;
}
