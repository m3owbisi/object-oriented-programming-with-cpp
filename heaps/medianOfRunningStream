#include<iostream>
#include<algorithm>
#include<string>
#include<stack>
#include<set>
#include<vector>
#include<map>
#include<unordered_map>
#include<queue>
// #define int long long
#define vi vector<int>
#define pii pair<int,int>
#define vii vector<pii>
#define rep(i,a,b) for(int i=a;i<b;i++)
#define ff first
#define ss second
#define setbits(x) builtin_popcount(x)
using namespace std;
void insert(int x){
    if(pqmin.size()==pqmax.size()){
        if(pqmax.size()==0){
            pqmax.push(x);
            return;
        }
        if(x<pqmax.top()){
            pqmax.push(x);
        } else{
            pqmin.push(x);
        }
    } else{
        // two cases possible
        // case 1 : size of maxHeap > size of minHeap
        // case 2 : size of minHeap > size of maxHeap
        if(pqmax.size()>pqmin.size()){
            if(x>=pqmax.top()){
                pqmin.push(x);
            } else{
                /* code */
                int temp=pqmax.top();
                pqmax.pop();
                pqmin.push(temp);
                pqmax.push(x);
            }
        } else{
            /* code */
            if(x<=pqmin.top()){
                pqmax.push(x);
            } else{
                int temp=pqmin.top();
                pqmin.pop();
                pqmax.push(temp);
                pqmin.push(x);
            }
        }
    }
}
double findMedian(){
    if(pqmin.size()==pqmax.size()){
        return (pqmin.top()+pqmax.top())/2.0;
    } else if(pqmax.size()>pqmin.size()){
        return pqmax.top();
    } else{
        return pqmin.top();
    }
}
signed main(){
    priority_queue<int,vi,greater<int>> pqmin;
    priority_queue<int,vi> pqmax;
    insert(10);
    insert(15);
    insert(21);
    insert(30);
    insert(18);
    insert(19);
    cout<<findMedian()<<endl;
    return 0;
}
